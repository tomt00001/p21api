[project]
name = "p21api"
version = "0.1.0"
description = "A robust Python application for extracting and processing data from P21 ERP systems via OData API"
authors = [{ name = "tomt00001", email = "107521427+tomt00001@users.noreply.github.com" }]
requires-python = ">=3.12,<3.14"
readme = "README.md"
license = { text = "MIT" }
keywords = ["p21", "erp", "odata", "api", "data-export"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "requests>=2.32.3,<3",
    "petl>=1.7.15,<2",
    "pyqt6>=6.7.1,<7",
    "pydantic>=2.10.6,<3",
    "pydantic-settings>=2.7.1,<3",
]

[dependency-groups]
dev = [
    "ipdb>=0.13.13,<0.14",
    "ipython>=8.27.0,<9",
    "pytest>=8.0.0,<9",
    "pytest-mock>=3.12.0,<4",
    "pytest-cov>=4.0.0,<5",
    "pytest-xdist>=3.5.0,<4",
    "pytest-asyncio>=0.23.0,<0.24",
    "ruff>=0.5.3,<1.0",
    "mypy>=1.8.0,<2",
    "pre-commit>=3.6.0,<4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
src = ["./p21api", "./gui", "./reports", "./config", "./client"]
line-length = 88
target-version = "py311"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "*migrations*",
]

[tool.ruff.lint]
# Pyflakes, Pycodestyle, and isort
select = ["E", "F", "I", "T"]
# maybe need "E129"
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
per-file-ignores = {}

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.bandit]
# Exclude test files from security scanning
exclude_dirs = ["tests"]
# Skip certain security checks that may be false positives
skips = ["B101"]  # Skip "Test for use of assert" in non-test files

[tool.coverage.run]
source = ["p21api", "gui"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.pyright]
# Include all source directories
include = ["p21api", "gui", "tests", "main.py"]
# Exclude build/cache directories
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/node_modules",
    "build",
    "dist",
    ".venv",
    "env",
    "htmlcov",
    "output"
]
# Use strict type checking for main code
typeCheckingMode = "strict"
# Python version
pythonVersion = "3.12"
# Strict settings for main code
reportMissingImports = true
reportMissingTypeStubs = false  # We have custom stubs for petl
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportWildcardImportFromLibrary = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = true
reportPrivateUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverloads = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = false  # Allow implicit string concatenation
reportUnboundVariable = true
reportUndefinedVariable = true
# Stub path for custom type stubs
stubPath = "typings"

# Relax rules for test files since they use pytest fixtures and mocks
[[tool.pyright.executionEnvironments]]
root = "tests"
extraPaths = ["tests"]
reportMissingParameterType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportPrivateUsage = false
reportUntypedFunctionDecorator = false
reportUntypedClassDecorator = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportMissingImports = false
reportUnusedVariable = false

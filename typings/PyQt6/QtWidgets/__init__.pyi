"""Type stubs for PyQt6 widgets and core classes."""

from typing import Any, Callable, Optional, Union

class QObject:
    def __init__(self, parent: Optional[QObject] = None) -> None: ...

class QWidget(QObject):
    def __init__(self, parent: Optional[QWidget] = None) -> None: ...
    def setLayout(self, layout: "QLayout") -> None: ...
    def show(self) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setSizePolicy(self, horizontal: Any, vertical: Any) -> None: ...

class QDialog(QWidget):
    def __init__(self, parent: Optional[QWidget] = None) -> None: ...
    def setWindowTitle(self, title: str) -> None: ...
    def setGeometry(self, x: int, y: int, w: int, h: int) -> None: ...
    def exec(self) -> int: ...
    def accept(self) -> None: ...
    def reject(self) -> None: ...
    DialogCode: Any
    Accepted: int
    Rejected: int

class QSignal:
    def connect(self, slot: Union[Callable[..., Any], Any]) -> Any: ...
    def disconnect(self) -> None: ...
    def emit(self, *args: Any) -> None: ...

class QPushButton(QWidget):
    def __init__(self, text: str = "", parent: Optional[QWidget] = None) -> None: ...
    def setText(self, text: str) -> None: ...
    def text(self) -> str: ...
    def setDefault(self, is_default: bool) -> None: ...
    clicked: QSignal

class QLineEdit(QWidget):
    class EchoMode:
        Normal: int
        Password: int

    def __init__(self, text: str = "", parent: Optional[QWidget] = None) -> None: ...
    def setText(self, text: str) -> None: ...
    def text(self) -> str: ...
    def setEchoMode(self, mode: int) -> None: ...

class QDateEdit(QWidget):
    def __init__(self, parent: Optional[QWidget] = None) -> None: ...
    def setCalendarPopup(self, enable: bool) -> None: ...
    def setDate(self, date: Any) -> None: ...
    def date(self) -> Any: ...

class QListWidget(QWidget):
    def __init__(self, parent: Optional[QWidget] = None) -> None: ...
    def addItem(self, text: str) -> None: ...
    def setSelectionMode(self, mode: Any) -> None: ...
    def selectedItems(self) -> list[Any]: ...
    def item(self, row: int) -> Any: ...
    def count(self) -> int: ...
    SelectionMode: Any
    MultiSelection: Any

class QGroupBox(QWidget):
    def __init__(self, title: str = "", parent: Optional[QWidget] = None) -> None: ...
    def setCheckable(self, checkable: bool) -> None: ...
    def setChecked(self, checked: bool) -> None: ...
    toggled: QSignal

class QLabel(QWidget):
    def __init__(self, text: str = "", parent: Optional[QWidget] = None) -> None: ...
    def setText(self, text: str) -> None: ...

class QListWidgetItem:
    def __init__(self, text: str = "", parent: Optional[QWidget] = None) -> None: ...
    def setSelected(self, selected: bool) -> None: ...
    def text(self) -> str: ...

class QLayout(QObject):
    def addWidget(self, widget: QWidget) -> None: ...
    def addLayout(self, layout: "QLayout") -> None: ...

class QVBoxLayout(QLayout):
    def __init__(self, parent: Optional[QWidget] = None) -> None: ...
    def addWidget(self, widget: QWidget) -> None: ...
    def addLayout(self, layout: "QLayout") -> None: ...

class QHBoxLayout(QLayout):
    def __init__(self, parent: Optional[QWidget] = None) -> None: ...
    def addWidget(self, widget: QWidget) -> None: ...
    def addLayout(self, layout: "QLayout") -> None: ...

class QSizePolicy:
    Policy: Any
    Expanding: Any

class QFileDialog:
    @staticmethod
    def getExistingDirectory(
        parent: Optional[QWidget] = None,
        caption: str = "",
        directory: str = "",
        options: Any = None,
    ) -> str: ...

class QApplication:
    def __init__(self, args: list[str]) -> None: ...
    def exec(self) -> int: ...
    @staticmethod
    def instance() -> Optional["QApplication"]: ...

class QDate:
    @staticmethod
    def currentDate() -> "QDate": ...
    def addDays(self, days: int) -> "QDate": ...

def qApp() -> Optional[QApplication]: ...
